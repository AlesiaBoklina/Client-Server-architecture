HW Client_Server

1) Прочиать про клиент-серверную архитектуру
Сервером может быть : 
1. оборудование (шкаф, в котором натыканы железяки и моргают лампочки)
2. софт (программное обеспечение)
3. нейкая сущность, которая принимает запрос и отвечает на него (напр. любой компьютер, телефон, но при условии, что на этом Сервере запущена специальная программа (называется HTTP-сервер, т.е. это программа которая работает по протоколу HTTP), которая будет принимать запросы (отправленные с помощью HTTP метода, имея все атрибуты (хедеры, бади(если оно есть)) и отправлять ответ (HTTP со статус кодом)
Клиент - это тот, кто отправляет запрос, а Сервер - это тот, кто получает запрос и даёт ответ
Клиентом может быть: 
1. любой телефон, компьютер (на которых должен быть запущен софт, который отправляет запрос)
2. десктопное приложение 
3. сам Сервер может быть и Клиентом (это происходит, когда Сервер получил запрос и затем в свою очередь спрашивает дальше у другого Сервера)
Клиент-серверная архитектура бывает :
1. 2ухуровневая (есть Клиент и Сервер) 
2. 3ехуровневая (есть Клиент, Сервер и База Данных)
3. многоуровневая (есть Клиент, Сервер, База Данных и другие Сервера)
Дата центр - образовывается из большого количества Серверов, в которых крутятся все возможные сайты, сервисы, 

2) Что такое HTTP и HTTPS
HTTP (HyperText Transfer Protocol -"протокол передачи гипертекста") - протокол прикладного уровня передачи данных, изначально - в виде гипретекстовых документов в формате HTML, в настоящее время используется для передачи произвольных данных. Основой HTTP является технология "клиент-сервер", то есть предполагается существование : 
1. Клиентов, которые инициируют соединение и отправляют запросы
2. Серверов, которые ожидают соединения для получения запроса, производят сбор необходимой информации (пакетов) и отвечают на него 
Несмотря на то, что HTTP основан на TCP/IP, он также может использовать любой другой протокол транспортного уровня. По умолчанию в протоколе используется порт 80 для соединения с сервером. Также может использовать другие порты, например 8000 или 8080. Подходит для веб-сайтов общего назначения, таких как блоги.
HTTPS (HyperText Transfer Protocol Secure) - расширение протокола HTTP для поддержки шифрования в целях повышения безопасности. Данные в протоколе HTTPS передаются поверх криптографических протоколов TLS или SSL. По умолчанию в протоколе используется TCP-порт 443. Перед отправкой данных на сервер браузер зашифровывает информацию. Чтобы расшифровать и прочитать её, необходим специальный ключ, который хранится только на сервере. Такое шифрование называется кроптографическим. Даже если мошенник перехватит информацию, то он не сможет её прочитать, т.к. не сможет подобрать ключ к шрифту. Подходит для сайтов где необходимо вводить конфиденциальную информацию. 

3) HTTP методы
GET - получает информацию с Сервера (читает данные с ресурса), не требует тела запроса 
POST - создает в базе новый объект (отправляет пользовательские данные на ресурс), требует тело запроса с полями этого объекта 
PUT - используется для обновления ресурса, запрос должен содержать обновленные данные оригинального ресурса (полностью или только обновляемую часть)  
PATCH - используется для "модификации" ресурса, запрос должен содержать только изменяемые данные ресурса
DELETE - используется для удаления указанного ресурса, идентифицированного конкретным URI

4) HTTP статус коды сервера
1хх - Информационные (Informational) 
2хх - Успех (Success) в зависимости от статуса, Сервер ещё может передать заголовки и тело сообщения 
3хх - Перенаправление (Rediction) адрес по которому клиенту необходимо произвести запрос, Сервер указывает в заголовке Location
4хх - Ошибка Клиента (Client Error) Сервер должен вернуть в теле сообщения гипертекстовое пояснение для пользователя 
5хх - Ошибка Сервера (Server Error) Сервер должен включать в тело сообщения объяснение 


5) Что такое ядро браузера 
Ядро браузера - программа (машина), которая распознаёт отправленную от Сервера информацию и начинает выполнять JavaScripts, парсинт HTML; это механизм, который (если в правильном формате подаются файлы в виде HTML, CSS и JS) распознаёт и прочитывает пакеты, которые пришли в responce от Сервера и понимает что с ними надо делать (т.е. фронтэнд разработчики написали бизнес-логику как правильно читать HTML, как правильно отображать стили в CSS, где расположить картинки, , какого цвета должна быть кнопка, где поставить текст или кнопку на веб интерфейсе). 
HTML - "скелет", в котором написано, что картинка будет стоять слева вверху, текст будет стоять правее от картинки, под текстом будет какая-то кнопка. 
CSS - "мясо", в котором написано какого цвета будет кнопка (красная, зелёная, с заливкой), каким текст будет (жирный, курсивом), какого размера картинка, левее или правее она будет распологаться. 
JS - отвечает за то, как это всё будет работать, за механику действий (чтобы отработал скрипт, выпал список, согласно выбранным фильтрам на сайте отобразилась информация). 

6) Какие браузеры какие ядра используют
Blink - ядро браузера Chromium, Google Chrome, Microsoft Edge, Opera и Vivaldi. Он является ответвлением WebKit (разработан компанией Google Ink)
Gecko - ядро браузера Fiferox (используется в продуктах семейства Mozilla)
WebKit - ядро браузера Apple Safari (разработан компанией Apple)


7) Что такое API
API (Application Programming Interface, программный интерфейс приложения) - состовляющая часть Сервера (интерфейс), через которую получает request Клиента и отправляет responce от Сервера. Приложения используют API для взаимодействия со сторонними приложениями и своими пользователями 

8) Что такое эндпоинты
Эндпоинт (конечная точка) - точка касания API сервера (куда полетит HTTP request); это определенные URN-адреса, которые приложение использует для связи со сторонними службами и своими пользователями. Когда Сервер получает запрос в эндпоинт (наприм. loginpage), это значит, что бэкенд разработчики написали такое API, в котором есть эндпоинт loginpage, и если от Клиента прилетает GET request в эндпоинт loginpage, сервер знает, что делать, т.е. бэкэнд разработчики написали бизнес-логику, которая начинает работать, если постучаться конкретно в этот эндпоинт. Запрос пришёл, Сервер идёт в файловую систему и достаёт нужную информацию - собирает пакет (картинки, тексты, поднял файлы HTML(разметка), CSS(каскадная таблица стилей, чтобы красиво и грамотно всё разрисовать)), но это всё в текстовом формате (base64) отправляется, данный responce Клиент преобразует в необходимый формат.

9) URL (URI, URL, URN)
URI (Uniform Resourse Identifier) - унифицированный идентификатор ресурса, URI = URL + URN https://wiki.merionet.ru/images/vse-chto-vam-nuzhno-znat-pro-devops/1.png
URL (Uniform Resourse Locator) - унифицированный определитель местонахождения ресурса, URL это только часть URI, без URN; URL ≠ URI; https://wiki.merionet.ru
URN (Uniform Resourse Name) - унифицированное имя ресурса(аналог эндпоинта), URN это только часть URI, без URL 
images/vse-chto-vam-nuzhno-znat-pro-devops/1.png

10) Идемпотентные HTTP методы
Метод HTTP является идемпотентным, если повторный идентичный запрос, сделанный один или несколько раз подряд, имеет один и тот же эффект, не изменяющий состояние сервера. Таковами являются методы GET, HEAD, PUT, TRACE, OPTIONS и DELETE


11) Безопасные HTTP методы
Метод HTTP является безопасным, если он не меняет состояние сервера, т.е. проводит операции "only read" GET, HEAD, OPTIONS и TRACE

12) Иденфикация, Аутентификация, Авторизация
Идентификация - когда система запрашивает логин, пользователь его указывает, система распознает его как существующий
Аутентификация - когда система запрашивает пароль, пользователь его вводит, и система определяет, что пользователь настоящий, т.к. пароль совпал 
Двухфакторная аутентификация - когда система ещё дополнительно запрашивает одноразовый код из СМС например, помимо пароля  
Авторизация - когда пользователю даётся право доступа к неким ресурсам или возможностям (например доступ к своему интернет-банкингу, например производить оплату платежей, переводить деньги с карты на карту) 

13) Что такое IP
IP (Internet Protocol) - уникальный адрес, идентифицирующий устройство в интернете или локальной сети; идентификатор, позволяющий передавать информацию между утройствами в сети : он содержит информацию о местоположении устройства и обеспечивает его доступность для связи (можно сравнить с номером телефона или адресом дома); 
передает информацию с использованием установленных правил, отправляемую через интернет или локальную сеть (ноут, планшет и мобильный телефон подключеные к одному модему (маршрутизатору)); 
IP-адрес назначается устройству интернет-провайдером.
IPv4 - версия IP, был разработан в связи с быстрым ростом сети интеренет, имеет 32-битную структуру, выглядит как 4 блока по 3 значения, чисел от 0 до 255, разделенных тремя точками(например 192.168.0.3). Ограничен максимально возможным числом уникальных адресов 3,4 млн. 
IPv6 - версия IP, имеет 128-битную структуру, выглядит как 8 блоков по 4 значения, разделенных двоеточием (например 2001:0db8:85a3:0000:0000:8a2e:0370:7334) 
 
14) Что такое октеты в DNS
DNS (Domain Name System, система доменных имен) - система, которая позволяет браузеру найти запрошенный пользователем сайт по имени домена. Смысл DNS в том, что она присваивает каждому цифровому IP-адресу понятное буквенное имя (домен), напимер IP-адресу сервера 194.58.116.30 соответсвует домен reg.ru.
DNS-сервер - специализированный компьютер (или группа), который хранит таблицы соответствий вида "имя домена" - "IP-адрес".
Октет (в русском языке обычно называют "байтом" - единица хранения и обработки цифровой информации; совокупность битов, обрабатываемая компьютером одномоментно) - восемь двоичных цифр (например, 11000000, или 192 в десятичном виде), октет всегда равен 8 битам. Таким образом, каждый октет может принимать в двоичном виде значения от 00000000 до 11111111, или от 0 до 255 в десятичном виде. IP-адреса состоят из октетов (например, 192.168.1.1 в виде десятичных чисел). Октет может принимать 256 возможных состояний (кодов, значений, комбинаций битов (нулей и единиц).

15) Что такое порт, сколько портов у Linux сервера
Порт - это просто число (идентификатор), чтобы определить получателя. Система смотрит, какой номер порта стоит на пришедшем пакете с данными, находит программу, которая подписана на него и передает ей. В этом и смысл портов - чтобы система всегда знала, кому какие данные отдавать и кто их отправляет.
Количество портов ограничено с учетом 16-битной адресации (2^16(2 в степени 16)=65536, начало - "0"). Все порты разделены на 3 диапозона - общеизвестные (или системные, 0-1023), зарегистрированные (или пользовательские, 1024-49151) и динамические (или частные, 49152-65536).

16) Уровни OSI
Модель OSI (Open Systems Interconnection) - это скелет, фундамент и база взаимодействия сетевого оборудования. Посредством неё общаются такие устройства, как ПК с сетевыми картами, коммутаторы, роутеры. 
Уровни OSI :
1. Физический (Physical layer, L1) - происходит передача физических сигналов (токов, света, радио) от источника к получателю. На этом уровне мы оперируем кабелями, контактами в разъемах, кодированием единиц и нулей, то есть бит. К этому уровню относятся концентраторы и репитеры - "глупые" железки, которые могут просто работать с физичесикм сигналом, не вникая в его логику (не декодируя). Сюда относятся - Ethernet, Bluetooth, Wi-Fi.
2. Канальный (Data link layer, L2) - происходит превращение битов в кадры/фреймы, затем формируются кадры с адресом отправителя и получателя. На данном уровне используются коммутаторы (устройство, предназначенное для соединения нескольких узлов компьютерной сети), их задача - передать сформированные кадры от одного устройства к другому, используя в качестве адресов только физичесике MAC-адреса (уникальные адреса каждого устройства, "железа"), состоят из 48 бит (например, 00:16:52:00:1f:03). Сюда относятся - Ethernet, коммутаторы, мосты.
3. Сетевой (Network layer, L3) - происходит марштутизация трафика. На этом уровне используется протокол ARP (Adress Resolution Protocol - протокол определения адреса), с помощью него 64-битные MAC-адреса преобразуются в 32-битные IP-адреса и наоборот. Например, чтобы попасть на сайт wiki.merionet.ru, система отправляет DNS-запрос, получает ответ в виде IP-адреса и подставляет его в пакет. Сюда относятся - маршрутизаторы (устройства, котрые пересылают пакеты между различными сигментами сети), IPv4, IPv6.
4. Транспортный (Transport layer, L4) - происходит передача данных по сети (транспортировка пакетов). На этом уровне используется 2 основных протокола : TCP (Transmission Control Protocol, контролирует целостность доставленной информации - используется при передаче данных (сегментов), наиболее чувствительных к потерям (например, если в тексте потеряются гласные, то будет сложно понять смысл); UDP (User Datagram Protocol, позволяет организовать связь без установки соединения) - используется при передаче данных (датаграмм), наиболее чувствительных к задержкам (например, во время видеосвязи задержка звука). Сюда относятся - протоколы TCP и UDP.
5. Сеансовый (Session layer, L5) - отвечает за поддержку сеанса, управляет соединениями/сессиями (например, во время видеозвонка необходимо, чтобы два потока данных (аудио и видео) шли синхронно, когда к разговору присоединится третий человек - получится конференция, задача этого уровня - сделать так, чтобы собеседники могли понять, кто сейчас говорит. На этом уровне используются данные. 
6. Представления данных (Presentation layer, L6) - происходит преобразование форматов сообщений, такое как кодирование или сжатие (например, одно устройство умеет отображать текст только в кодировке ASCII, а другое только в UTF-8, перевод текста из одной кодировки в другую происходит на данном уровне). Этот уровень занимается представлением картинок (в JPEG, GIF)  и видео-аудио (в MPEG). На этом уровне используются данные.
7. Прикладной (Application layer, L7), его задача - использовать свои протоколы, чтобы пользователь увидел данные в понятном ему виде. На этом уровне используются данные, а также протоколы HTTP, HTTPS, DNS.
Инкапсуляция - процесс, когда данные передаются с верхних уровней на нижние.
Декапсуляция - процесс, когда данные передаются с нижних уровней на верхние. 

17) Хедеры http запросов
